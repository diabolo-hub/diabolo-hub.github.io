<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>diabolo随笔</title>
  
  <subtitle>记录点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-09-26T06:34:24.314Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>diabolo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mac用户查看</title>
    <link href="http://yoursite.com/2022/09/26/mac-20220926-mac%E7%94%A8%E6%88%B7%E6%9F%A5%E7%9C%8B/"/>
    <id>http://yoursite.com/2022/09/26/mac-20220926-mac用户查看/</id>
    <published>2022-09-25T16:00:00.000Z</published>
    <updated>2022-09-26T06:34:24.314Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="当前用户的用户名"><a href="#当前用户的用户名" class="headerlink" title="当前用户的用户名"></a>当前用户的用户名</h1><p>whoami</p><h1 id="切换到root超级用户-—-需要输入密码"><a href="#切换到root超级用户-—-需要输入密码" class="headerlink" title="切换到root超级用户 —- 需要输入密码"></a>切换到root超级用户 —- 需要输入密码</h1><p>sudo -i</p><h1 id="su-要切换到的用户名-切换到某一个普通用户-注意-横杠两边都有一个空格"><a href="#su-要切换到的用户名-切换到某一个普通用户-注意-横杠两边都有一个空格" class="headerlink" title="su - 要切换到的用户名 // 切换到某一个普通用户 注意:横杠两边都有一个空格"></a>su - 要切换到的用户名 // 切换到某一个普通用户 注意:横杠两边都有一个空格</h1><p>su - diabolo，切换到 diabolo</p><h1 id="查看当前目录下所有文件的读写属性"><a href="#查看当前目录下所有文件的读写属性" class="headerlink" title="查看当前目录下所有文件的读写属性"></a>查看当前目录下所有文件的读写属性</h1><p>ls -l</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;当前用户的用户名&quot;&gt;&lt;a href=&quot;#当前用户的用户名&quot; class=&quot;headerlink&quot; title=&quot;当前用户的用户名&quot;&gt;&lt;/a&gt;当前用户的用户名&lt;/h1
      
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>su、sudo、sudo su、sudo -i使用和区别</title>
    <link href="http://yoursite.com/2022/09/26/mac-20220926-su%E3%80%81sudo%E3%80%81sudo-su%E3%80%81sudo-i%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2022/09/26/mac-20220926-su、sudo、sudo-su、sudo-i使用和区别/</id>
    <published>2022-09-25T16:00:00.000Z</published>
    <updated>2022-09-26T06:44:08.456Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><hr><ul><li>**su、sudo、sudo su、sudo -i使用和区别: <a href="https://zhuanlan.zhihu.com/p/250665300" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/250665300</a></li></ul><hr><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><ol><li>sudo 需要输入当前用户的密码</li><li>su 需要输入 root 用户的密码<h2 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h2></li><li>sudo 只允许使用提升的权限运行单个命令</li><li>su 启动一个新的shell，同时允许使用 root 权限运行尽可能多的命令，直到明确退出</li></ol><h2 id="su-介绍"><a href="#su-介绍" class="headerlink" title="su 介绍"></a>su 介绍</h2><p>su 用以切换不同的用户的身份</p><ol><li>su - diabolo, su - root<br>默认只是切换身份，并没有切换环境变量，环境变量依然是普通用户的。<br>切换用户身份时，用户的环境变量也切换成新用户的环境变量,所以”-“不能省略,不然有些操作无法执行。<br>su root 输入root密码后切换之root用户但是pwd目录不变<br>su - root 输入root密码后切换之root用户但是pwd目录/root</li></ol><h2 id="sudo-介绍"><a href="#sudo-介绍" class="headerlink" title="sudo 介绍"></a>sudo 介绍</h2><p>sudo 一般加的是命令sudo -i root与sudo - root、sudo -i ,sudo - ，sudo root效果相同</p><p>sudo -i 直接运行sudo命令加-i参数 要求执行该命令的用户必须在sudoers中才可以</p><p>sudo su 运行sudo命令给su命令提权，运行su命令。要求执行该命令的用户必须在sudoers中才可以</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;**su、sudo、sudo su、sudo -i使用和区别: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/250665
      
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>修改文件所属用户</title>
    <link href="http://yoursite.com/2022/09/26/mac-20220926-%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%89%80%E5%B1%9E%E7%94%A8%E6%88%B7/"/>
    <id>http://yoursite.com/2022/09/26/mac-20220926-修改文件所属用户/</id>
    <published>2022-09-25T16:00:00.000Z</published>
    <updated>2022-09-26T06:34:24.329Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="由于-db-json-属于-root，一直执行失败，提示没权限"><a href="#由于-db-json-属于-root，一直执行失败，提示没权限" class="headerlink" title="由于 db.json 属于 root，一直执行失败，提示没权限"></a>由于 db.json 属于 root，一直执行失败，提示没权限</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">zhangdaiyindeMacBook-Pro:diabolo-hub-source-code root# ls -l</span><br><span class="line">total 10632</span><br><span class="line">drwxr-xr-x   16 diabolo  staff      512 Sep 26 14:24 .git</span><br><span class="line">-rw-r--r--    1 diabolo  staff       66 Jul 10 22:48 .gitattributes</span><br><span class="line">-rw-r--r--    1 diabolo  staff       74 Jul 10 22:48 .gitignore</span><br><span class="line">drwxr-xr-x   10 diabolo  staff      320 Sep 26 14:20 .idea</span><br><span class="line">-rw-r--r--    1 diabolo  staff      934 Sep 23 17:29 Dockerfile-bak</span><br><span class="line">-rw-r--r--    1 diabolo  staff     1628 Sep 26 14:09 Dockerfile-hexo</span><br><span class="line">-rw-r--r--    1 diabolo  staff     2145 Sep 26 11:41 Dockerfile-pm2</span><br><span class="line">-rw-r--r--    1 diabolo  staff      640 Jul 10 22:48 README.md</span><br><span class="line">-rw-r--r--    1 diabolo  staff     3288 Aug  3 14:13 _config.yml</span><br><span class="line">-rw-r--r--    1 root     staff  4013230 Sep 26 11:38 db.json</span><br><span class="line">-rw-r--r--    1 diabolo  staff      184 Sep 26 10:42 entrypoint.sh</span><br><span class="line">-rw-r--r--    1 diabolo  staff      262 Sep 20 15:24 hexo_run.js</span><br><span class="line">drwxr-xr-x  374 diabolo  staff    11968 Sep 16 14:29 node_modules</span><br><span class="line">-rw-r--r--    1 diabolo  staff   458034 Sep 16 14:29 package-lock.json</span><br><span class="line">-rw-r--r--    1 diabolo  staff      969 Sep 16 14:29 package.json</span><br><span class="line">drwxr-xr-x   28 root     staff      896 Sep 26 11:21 public</span><br><span class="line">drwxr-xr-x    5 diabolo  staff      160 Jul 10 22:48 scaffolds</span><br><span class="line">drwxr-xr-x   10 diabolo  staff      320 Aug  3 14:13 source</span><br><span class="line">drwxr-xr-x    5 diabolo  staff      160 Jul 10 22:48 themes</span><br><span class="line">drwxr-xr-x    4 diabolo  staff      128 Aug  3 14:13 uploadPhotos</span><br><span class="line">-rw-r--r--    1 diabolo  staff     1430 Sep  5 14:47 ????????????????????????docker-hexo.md</span><br></pre></td></tr></table></figure><h1 id="将-db-json-文件和-public-文件夹修改为-diabolo-用户所有"><a href="#将-db-json-文件和-public-文件夹修改为-diabolo-用户所有" class="headerlink" title="将 db.json 文件和 public 文件夹修改为 diabolo 用户所有"></a>将 db.json 文件和 public 文件夹修改为 diabolo 用户所有</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown diabolo:staff db.json</span><br><span class="line">sudo chown diabolo:staff public</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;由于-db-json-属于-root，一直执行失败，提示没权限&quot;&gt;&lt;a href=&quot;#由于-db-json-属于-root，一直执行失败，提示没权限&quot; class=
      
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>部署到github</title>
    <link href="http://yoursite.com/2022/09/26/hexo-%E7%AC%94%E8%AE%B0-hexo%E7%AC%94%E8%AE%B0-%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <id>http://yoursite.com/2022/09/26/hexo-笔记-hexo笔记-部署到github/</id>
    <published>2022-09-25T16:00:00.000Z</published>
    <updated>2022-09-26T09:55:06.729Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="deploy配置"><a href="#deploy配置" class="headerlink" title="deploy配置"></a>deploy配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:diabolo-hub&#x2F;xxx.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  token: &#39;ghp_b...&#39;</span><br><span class="line">  message:</span><br><span class="line">  name: diabolo-hub</span><br><span class="line">  email: zhangdaiyin.cool@163.com</span><br></pre></td></tr></table></figure><h1 id="token配置"><a href="#token配置" class="headerlink" title="token配置"></a>token配置</h1><p><a href="https://blog.csdn.net/qq_43659183/article/details/126041835" target="_blank" rel="noopener">使用personal token将hexo本地文件推到GitHub</a></p><ol><li>个人设置中心</li><li>左侧底部的开发者中心</li><li>创建一个 personal token，权限勾选第一个 repo 即可，点击底部创建token</li></ol><h1 id="提示权限不足时，需要重新生成token并验证"><a href="#提示权限不足时，需要重新生成token并验证" class="headerlink" title="提示权限不足时，需要重新生成token并验证"></a>提示权限不足时，需要重新生成token并验证</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  diabolo-hub-source-code git:(first_code) ✗ hexo deploy</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">ssh_dispatch_run_fatal: Connection to 20.205.243.166 port 22: Operation timed out</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line">FATAL Something&#39;s wrong. Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class="line">Error</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (&#x2F;Users&#x2F;diabolo&#x2F;work&#x2F;workspace&#x2F;wk-github&#x2F;wk-github-zdy&#x2F;diabolo-hub-source-code&#x2F;node_modules&#x2F;hexo-util&#x2F;lib&#x2F;spawn.js:37:17)</span><br><span class="line">    at ChildProcess.emit (node:events:513:28)</span><br><span class="line">    at maybeClose (node:internal&#x2F;child_process:1093:16)</span><br><span class="line">    at Process.ChildProcess._handle.onexit (node:internal&#x2F;child_process:302:5)</span><br></pre></td></tr></table></figure><blockquote><p>若token无误，还是提示权限不足，可能是发布目录中存在文件 或 文件夹 的操作权限不足，如 root 读写权限，普通用户构建发布</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;deploy配置&quot;&gt;&lt;a href=&quot;#deploy配置&quot; class=&quot;headerlink&quot; title=&quot;deploy配置&quot;&gt;&lt;/a&gt;deploy配置&lt;/h1
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
      <category term="笔记" scheme="http://yoursite.com/categories/hexo/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>docker logs 日志查询</title>
    <link href="http://yoursite.com/2022/09/26/depth-docker-notes-20220926-docker-logs-%E6%97%A5%E5%BF%97%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2022/09/26/depth-docker-notes-20220926-docker-logs-日志查询/</id>
    <published>2022-09-25T16:00:00.000Z</published>
    <updated>2022-09-26T03:32:24.828Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><hr><ul><li><strong>Docker日志查看命令:<a href="https://blog.csdn.net/begefefsef/article/details/126327588" target="_blank" rel="noopener">https://blog.csdn.net/begefefsef/article/details/126327588</a> </strong></li></ul><hr><h1 id="简单日志查询"><a href="#简单日志查询" class="headerlink" title="简单日志查询"></a>简单日志查询</h1><p>docker logs 容器id</p><h1 id="滚动日志查看"><a href="#滚动日志查看" class="headerlink" title="滚动日志查看"></a>滚动日志查看</h1><p>docker logs -f 容器ID</p><h1 id="自动更新，展示最后指定300行数的日志"><a href="#自动更新，展示最后指定300行数的日志" class="headerlink" title="自动更新，展示最后指定300行数的日志"></a>自动更新，展示最后指定300行数的日志</h1><p>docker logs -f –tail=300 容器id</p><h1 id="查看最近30分钟的日志"><a href="#查看最近30分钟的日志" class="headerlink" title="查看最近30分钟的日志"></a>查看最近30分钟的日志</h1><p>docker logs –since 30m 容器ID</p><h1 id="查看某时间之后的日志的最新500条日志："><a href="#查看某时间之后的日志的最新500条日志：" class="headerlink" title="查看某时间之后的日志的最新500条日志："></a>查看某时间之后的日志的最新500条日志：</h1><p>docker logs –since=”2021-11-30” –tail=500 容器ID</p><h1 id="查看某时间之后的日志："><a href="#查看某时间之后的日志：" class="headerlink" title="查看某时间之后的日志："></a>查看某时间之后的日志：</h1><p>docker logs -t –since=”2021-11-30T00:00:00” 容器ID</p><h1 id="查看某时间段日志："><a href="#查看某时间段日志：" class="headerlink" title="查看某时间段日志："></a>查看某时间段日志：</h1><p>docker logs -t –since=”2021-11-30T00:00:00” –until “2021-12-30T00:00:00” 容器ID</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Docker日志查看命令:&lt;a href=&quot;https://blog.csdn.net/begefefsef/article/detai
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>容器运行后退出，仍然保持一直运行</title>
    <link href="http://yoursite.com/2022/09/26/depth-docker-notes-20220926-%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E5%90%8E%E9%80%80%E5%87%BA%EF%BC%8C%E4%BB%8D%E7%84%B6%E4%BF%9D%E6%8C%81%E4%B8%80%E7%9B%B4%E8%BF%90%E8%A1%8C/"/>
    <id>http://yoursite.com/2022/09/26/depth-docker-notes-20220926-容器运行后退出，仍然保持一直运行/</id>
    <published>2022-09-25T16:00:00.000Z</published>
    <updated>2022-09-26T03:35:24.522Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="使用命令一直循环打印日志"><a href="#使用命令一直循环打印日志" class="headerlink" title="使用命令一直循环打印日志"></a>使用命令一直循环打印日志</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6001:6001 -d -it --name myhexo2 -v &#x2F;Users&#x2F;diabolo&#x2F;work&#x2F;workspace&#x2F;wk-github&#x2F;wk-github-zdy&#x2F;diabolo-hub-source-code&#x2F;:&#x2F;usr&#x2F;blog&#x2F; myhexo:1.2 &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;使用命令一直循环打印日志&quot;&gt;&lt;a href=&quot;#使用命令一直循环打印日志&quot; class=&quot;headerlink&quot; title=&quot;使用命令一直循环打印日志&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker copy</title>
    <link href="http://yoursite.com/2022/09/23/depth-docker-config-20220923-docker-copy/"/>
    <id>http://yoursite.com/2022/09/23/depth-docker-config-20220923-docker-copy/</id>
    <published>2022-09-22T16:00:00.000Z</published>
    <updated>2022-09-26T03:29:10.902Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><hr><pre><code>COPY 指令详解: https://blog.csdn.net/qq_33801641/article/details/121122340</code></pre><hr><h1 id="docker-copy"><a href="#docker-copy" class="headerlink" title="docker copy"></a>docker copy</h1><ul><li>作用：复制内容到镜像</li><li>格式： COPY <src> <dest></li><li>详解：复制本地主机的 <src>下内容到镜像中的 <dest>，目标路径不存在时，会自动创建。</li><li><src>：可以是 Dockerfile 所在目录的一个相对路径(文件或目录)</li><li><dest>：可以是镜像内绝对路径，或者相对于工作目录(WORKDIR)的相对路径</li><li>路径：支持正则表达式， COPY test* /tmp</li></ul><h1 id="两种格式"><a href="#两种格式" class="headerlink" title="两种格式"></a>两种格式</h1><p>COPY [–chown=<user>:<group>] <src>… <dest><br>COPY [–chown=<user>:<group>] [“<src>“,… “<dest>“]<br>–chown<br>仅适用于 linux 上的 dockerfile，在 window 上没有用户、组的概念</p><h1 id="COPY-作用"><a href="#COPY-作用" class="headerlink" title="COPY 作用"></a>COPY 作用</h1><p>COPY 指令从 <src> 复制新文件、目录或远程文件 URL，并将它们添加到路径 <dest><br>可以指定多个 <src> 资源，但如果它们是文件或目录，则它们的路径被解析为相对于构建上下文的源<br>每个 <src> 可能包含通配符，匹配将使用 Go 的 filepath.Match 规则完成</p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><ol><li><ul><li>通配符<br>把所有 hom 开头的文件复制到镜像文件系统的 /mydir/ 目录下</li></ul></li></ol><p>COPY hom* /mydir/</p><ol><li>? 通配符<br>? 匹配 0 或 1 个字符，比如会把 home.txt 文件复制到 /mydir/ 目录下</li></ol><p>COPY hom?.txt /mydir/</p><ol><li>工作目录<br><dest> 是绝对路径，或相对于 WORKDIR 的路径，源将在目标容器内复制到该路径中</li></ol><p>使用相对路径的栗子<br>COPY test.txt relativeDir/</p><p>等价于</p><p>COPY test.txt <WORKDIR>/relativeDir/</p><h1 id="标志-–from"><a href="#标志-–from" class="headerlink" title="标志 –from="></a>标志 –from=<name></h1><p>将从 from 指定的构建阶段中寻找源文件 <src><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 第一构建阶段:将仅用于生成 requirements.txt 文件</span><br><span class="line">FROM tiangolo&#x2F;uvicorn-gunicorn:python3.9 as requirements-stage</span><br><span class="line"></span><br><span class="line"># 将当前工作目录设置为 &#x2F;tmp</span><br><span class="line">WORKDIR &#x2F;tmp</span><br><span class="line"></span><br><span class="line"># 生成 requirements.txt</span><br><span class="line">RUN touch requirements.txt</span><br><span class="line"></span><br><span class="line"># 第二构建阶段，在这往后的任何内容都将保留在最终容器映像中</span><br><span class="line">FROM python:3.9</span><br><span class="line"></span><br><span class="line"># 将当前工作目录设置为 &#x2F;code</span><br><span class="line">WORKDIR &#x2F;code</span><br><span class="line"></span><br><span class="line"># 从第一个阶段复制 requirements.txt;这个文件只存在于前一个 Docker 阶段，这就是使用 --from-requirements-stage 复制它的原因</span><br><span class="line">COPY --from&#x3D;requirements-stage &#x2F;tmp&#x2F;requirements.txt &#x2F;code&#x2F;requirements.txt</span><br><span class="line"></span><br><span class="line"># 运行命令</span><br><span class="line">RUN pip install --no-cache-dir --upgrade -r &#x2F;code&#x2F;requirements.txt</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;COPY 指令详解: https://blog.csdn.net/qq_33801641/article/details/121122340
&lt;/c
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker volume</title>
    <link href="http://yoursite.com/2022/09/23/depth-docker-config-20220923-docker-volume/"/>
    <id>http://yoursite.com/2022/09/23/depth-docker-config-20220923-docker-volume/</id>
    <published>2022-09-22T16:00:00.000Z</published>
    <updated>2022-09-26T03:29:10.976Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h1><ol><li><p>创建数据卷<br>docker volume create [OPTIONS] [VOLUME]<br>例: docker volume create hello</p><blockquote><p>mac电脑默认挂在路径： /var/lib/docker/volumes</p></blockquote></li><li><p>查看数据卷的挂载信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# docker volume inspect myhexo-vol</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2022-09-23T03:00:47Z&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;myhexo-vol&#x2F;_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;myhexo-vol&quot;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="查看全部数据卷"><a href="#查看全部数据卷" class="headerlink" title="查看全部数据卷"></a>查看全部数据卷</h1><p>docker volume ls</p></li></ol><h1 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h1><p>docker volume rm 数据卷名称/id</p><h1 id="删除所有无用数据卷"><a href="#删除所有无用数据卷" class="headerlink" title="删除所有无用数据卷"></a>删除所有无用数据卷</h1><p>docker volume prune</p><h1 id="设置容器数据路径只读"><a href="#设置容器数据路径只读" class="headerlink" title="设置容器数据路径只读"></a>设置容器数据路径只读</h1><p>在容器路径后面追加 :ro<br>docker run -v 宿主路径:容器路径:ro</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;volume&quot;&gt;&lt;a href=&quot;#volume&quot; class=&quot;headerlink&quot; title=&quot;volume&quot;&gt;&lt;/a&gt;volume&lt;/h1&gt;&lt;ol&gt;
&lt;l
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>CMD与ENTRYPOINT区别</title>
    <link href="http://yoursite.com/2022/09/23/depth-docker-notes-20220923-CMD%E4%B8%8EENTRYPOINT%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2022/09/23/depth-docker-notes-20220923-CMD与ENTRYPOINT区别/</id>
    <published>2022-09-22T16:00:00.000Z</published>
    <updated>2022-09-26T03:10:57.836Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><hr><ul><li><strong>entrypoint和cmd的区别是:  <a href="https://www.php.cn/docker/456654.html" target="_blank" rel="noopener">https://www.php.cn/docker/456654.html</a></strong></li><li><strong>Dockerfile 里指定执行命令用RUN 、ENTRYPOING和用CMD有何不同？: <a href="https://blog.csdn.net/agonie201218/article/details/121976911" target="_blank" rel="noopener">https://blog.csdn.net/agonie201218/article/details/121976911</a></strong></li></ul><hr><h1 id="CMD与ENTRYPOINT区别"><a href="#CMD与ENTRYPOINT区别" class="headerlink" title="CMD与ENTRYPOINT区别"></a>CMD与ENTRYPOINT区别</h1><ol><li>CMD用法：</li></ol><ul><li>CMD [“executable”,“param1”,“param2”] ：exec形式（首选）</li><li>CMD [“param1”,“param2”] ：作为ENTRYPOINT的默认参数</li><li>CMD command param1 param2 ：Shell形式</li></ul><ol><li>ENTRYPOINT用法：</li></ol><ul><li>ENTRYPOINT [“executable”, “param1”, “param2”]</li><li>ENTRYPOINT command param1 param2</li><li>多个CMD命令只有最后一个生效，前面的会被覆盖</li></ul><ol><li>小结<br>CMD和ENTRYPOINT指令都可以用来定义运行容器时所使用的默认命令<br>Dockerfile至少指定一个CMD或ENTRYPOINT<br>CMD可以用作ENTRYPOINT默认参数，或者用作容器的默认命令<br>docker run指定时，将会覆盖CMD<br>如果是可执行文件，希望运行时传参，应该使用ENTRYPOINT</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li>Dockerfile中只能指定一个ENTRYPOINT，如果指定了很多，只有最后一个有效。</li><li>执行docker run命令时，也可以添加–entrypoint参数，会把指定的参数继续传递给ENTRYPOINT<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;echo&quot;,&quot;foo&quot;]</span><br><span class="line">然后执行：</span><br><span class="line">docker run --entrypoint&#x3D;echo CONTAINER_NAME bar #注意没有echo</span><br><span class="line">那么，就相当于执行了echo bar，最终结果就是</span><br></pre></td></tr></table></figure></li><li>docker run命令如果指定了参数会把CMD里的参数覆盖：<br>（这里说明一下，如：docker run -it ubuntu /bin/bash 命令的参数是指/bin/bash 而非 -it ,-it只是docker 的参数，而不是容器的参数，以下所说参数均如此。）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;entrypoint和cmd的区别是:  &lt;a href=&quot;https://www.php.cn/docker/456654.html&quot;
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker信息命令</title>
    <link href="http://yoursite.com/2022/09/23/depth-docker-notes-20220923-docker%E4%BF%A1%E6%81%AF%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2022/09/23/depth-docker-notes-20220923-docker信息命令/</id>
    <published>2022-09-22T16:00:00.000Z</published>
    <updated>2022-09-26T03:10:57.811Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="查看docker系统信息"><a href="#查看docker系统信息" class="headerlink" title="查看docker系统信息"></a>查看docker系统信息</h1><p>docker system df</p><h1 id="查看docker信息"><a href="#查看docker信息" class="headerlink" title="查看docker信息"></a>查看docker信息</h1><p>docker info</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;查看docker系统信息&quot;&gt;&lt;a href=&quot;#查看docker系统信息&quot; class=&quot;headerlink&quot; title=&quot;查看docker系统信息&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>depth-docker-excp-20220920-docker容器启动后立即退出</title>
    <link href="http://yoursite.com/2022/09/20/depth-docker-excp-20220920-docker%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%90%8E%E7%AB%8B%E5%8D%B3%E9%80%80%E5%87%BA/"/>
    <id>http://yoursite.com/2022/09/20/depth-docker-excp-20220920-docker容器启动后立即退出/</id>
    <published>2022-09-20T02:04:37.247Z</published>
    <updated>2022-09-20T06:36:37.685Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="https://blog.csdn.net/m0_67393342/article/details/124171304" target="_blank" rel="noopener">docker启动容器之后马上又自动关闭解决办法</a></p><h1 id="docker容器启动后立即退出"><a href="#docker容器启动后立即退出" class="headerlink" title="docker容器启动后立即退出"></a>docker容器启动后立即退出</h1><h2 id="退出原因"><a href="#退出原因" class="headerlink" title="退出原因"></a>退出原因</h2><ol><li>docker容器运行必须有一个前台进程， 如果没有前台进程执行，容器认为空闲，就会自行退出</li><li>容器运行的命令如果不是那些一直挂起的命令（ 运行top，tail、循环等），就是会自动退出</li><li>这个是 docker 的机制问题</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>网上有很多介绍，就是起一个死循环进程，让他不停的循环下去，前台永远有进程执行，那么容器就不会退出了,以centos为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d centos &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>缺点： 命令太冗长了，还占用一个终端</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit centos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>添加-it 参数交互运行<br>添加-d 参数后台运行<br>这样就能启动一个一直停留在后台运行的Centos了。<br>docker ps 容器运行起来了<br>进入容器的方法：<br>使用exec，不要使用attach命令<br>attach命令就是使用现有终端，如果你要退出容器操作，那么bash结束，容器也就退出了<br>shell&gt;docker exec -it /bin/bash //新建一个bash</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/m0_67393342/article/details/124171304&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo后台运行</title>
    <link href="http://yoursite.com/2022/09/20/hexo-%E6%8F%92%E4%BB%B6-20220920-hexo%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
    <id>http://yoursite.com/2022/09/20/hexo-插件-20220920-hexo后台运行/</id>
    <published>2022-09-19T16:00:00.000Z</published>
    <updated>2022-09-20T07:32:13.120Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><hr><ul><li><strong>hexo 长期后台运行：<a href="http://t.zoukankan.com/young233-p-14628456.html" target="_blank" rel="noopener">http://t.zoukankan.com/young233-p-14628456.html</a></strong></li><li><strong>pm2官网文档：<a href="https://pm2.keymetrics.io/" target="_blank" rel="noopener">https://pm2.keymetrics.io/</a></strong></li></ul><hr><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ol><li>首先，我们需要安装它。<br>npm install -g pm2</li><li>进到博客的根目录，新建一个文件：hexo_run.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//run</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>)</span><br><span class="line"><span class="comment">/* 其实就是等于执行hexo server -p 6001，如果不指定端口，则默认端口: 4000 */</span></span><br><span class="line">exec(<span class="string">'hexo server -p 6001'</span>,(error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'exec error: $&#123;error&#125;'</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'stdout: $&#123;stdout&#125;'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'stderr: $&#123;stderr&#125;'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>在博客根目录启动这个进程<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start hexo_run.js</span><br></pre></td></tr></table></figure></li></ol><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启动js</span><br><span class="line">pm2 start hexo_run.js</span><br><span class="line"># 停止js</span><br><span class="line">pm2 stop hexo_run.js</span><br><span class="line"># 运行起来后可以使用pm2 show + 进程pid查看后台hexo进行</span><br><span class="line">pm2 show pid</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hexo 长期后台运行：&lt;a href=&quot;http://t.zoukankan.com/young233-p-14628456.html
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
      <category term="plugin" scheme="http://yoursite.com/categories/hexo/plugin/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>docker run</title>
    <link href="http://yoursite.com/2022/09/20/depth-docker-notes-20220920-docker-run/"/>
    <id>http://yoursite.com/2022/09/20/depth-docker-notes-20220920-docker-run/</id>
    <published>2022-09-19T16:00:00.000Z</published>
    <updated>2022-09-26T03:10:57.829Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><p>docker exec -it myhexo2 /bin/sh</p><h1 id="单纯启动应用"><a href="#单纯启动应用" class="headerlink" title="单纯启动应用"></a>单纯启动应用</h1><p>docker run -p 6001:6001 -d -it –name myhexo myhexo:1.0</p><h1 id="保持镜像永不退出运行"><a href="#保持镜像永不退出运行" class="headerlink" title="保持镜像永不退出运行"></a>保持镜像永不退出运行</h1><p>docker run -p 6001:6001 -d –name myhexo myhexo:1.0 /bin/sh -c “while true; do echo hello world; sleep 1; done”</p><h1 id="启动并进入容器"><a href="#启动并进入容器" class="headerlink" title="启动并进入容器"></a>启动并进入容器</h1><p>docker run -p 6001:6001 -d -it –name myhexo myhexo:1.0 /bin/bash</p><h1 id="docker-run-的时候执行-其他命令"><a href="#docker-run-的时候执行-其他命令" class="headerlink" title="docker run 的时候执行 其他命令"></a>docker run 的时候执行 其他命令</h1><p>docker run CONTAINER_NAME echo foo<br>等于运行的时候执行 echo foo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;进入容器&quot;&gt;&lt;a href=&quot;#进入容器&quot; class=&quot;headerlink&quot; title=&quot;进入容器&quot;&gt;&lt;/a&gt;进入容器&lt;/h1&gt;&lt;p&gt;docker exec 
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>depth-docker-notes-20220919-docker-scan镜像扫描</title>
    <link href="http://yoursite.com/2022/09/19/depth-docker-notes-20220919-docker-scan%E9%95%9C%E5%83%8F%E6%89%AB%E6%8F%8F/"/>
    <id>http://yoursite.com/2022/09/19/depth-docker-notes-20220919-docker-scan镜像扫描/</id>
    <published>2022-09-19T06:14:00.520Z</published>
    <updated>2022-09-19T06:15:37.046Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="docker-scan"><a href="#docker-scan" class="headerlink" title="docker scan"></a>docker scan</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh-3.2# docker scan --json myhexo</span><br><span class="line">failed to read docker scan configuration file. Please restart Docker Desktop: open &#x2F;var&#x2F;root&#x2F;.docker&#x2F;scan&#x2F;config.json: no such file or directory</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;docker-scan&quot;&gt;&lt;a href=&quot;#docker-scan&quot; class=&quot;headerlink&quot; title=&quot;docker scan&quot;&gt;&lt;/a&gt;doc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>depth-docker-notes-dockerfile-20220919-构建centos镜像使用</title>
    <link href="http://yoursite.com/2022/09/19/depth-docker-notes-dockerfile-20220919-%E6%9E%84%E5%BB%BAcentos%E9%95%9C%E5%83%8F%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2022/09/19/depth-docker-notes-dockerfile-20220919-构建centos镜像使用/</id>
    <published>2022-09-19T02:22:10.661Z</published>
    <updated>2022-09-19T02:22:45.959Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="构建centos镜像使用"><a href="#构建centos镜像使用" class="headerlink" title="构建centos镜像使用"></a>构建centos镜像使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">#指定作者</span><br><span class="line">MAINTAINER  zhangbao&lt;zhangbaohpu@163.com&gt;</span><br><span class="line"></span><br><span class="line">#ENV kv格式，这里指定工作目录，及默认进入容器的目录</span><br><span class="line">ENV MYPATH &#x2F;usr&#x2F;local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">#将原有的yum配置备份下</span><br><span class="line">RUN tar cvf &#x2F;etc&#x2F;yum.repos.d.tar &#x2F;etc&#x2F;yum.repos.d</span><br><span class="line"></span><br><span class="line">#修改yum源配置，</span><br><span class="line">RUN curl -o &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-vault-8.5.2111.repo</span><br><span class="line"></span><br><span class="line">#删除掉多于的repo文件</span><br><span class="line">RUN rm -rf &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Linux-*</span><br><span class="line"></span><br><span class="line">#使yum配置更新</span><br><span class="line">RUN yum clean all</span><br><span class="line">RUN yum makecache</span><br><span class="line"></span><br><span class="line">#下载需要的工具类</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo &quot;--end--&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;构建centos镜像使用&quot;&gt;&lt;a href=&quot;#构建centos镜像使用&quot; class=&quot;headerlink&quot; title=&quot;构建centos镜像使用&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dockerfile指令</title>
    <link href="http://yoursite.com/2022/09/19/depth-docker-config-20220919-dockerfile%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2022/09/19/depth-docker-config-20220919-dockerfile指令/</id>
    <published>2022-09-18T16:00:00.000Z</published>
    <updated>2022-09-26T03:29:10.983Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="dockerfile指令"><a href="#dockerfile指令" class="headerlink" title="dockerfile指令"></a>dockerfile指令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM            指定基础镜像</span><br><span class="line">MAINTAINER      指定作者</span><br><span class="line">RUN             执行参数中定义的命令，构建镜像时需要的命令</span><br><span class="line">EXPOSE          向容器外部公开的端口号</span><br><span class="line">WORKDIR         设置容器内默认工作目录</span><br><span class="line">USER            指定用户</span><br><span class="line">ENTROYPOINT     指定一个容器启动时运行的命令</span><br><span class="line">ENV             设置环境变量</span><br><span class="line">ADD|COPY        复制文件到镜像中</span><br><span class="line">VOLUME          容器数据卷，向镜像创建的容器添加卷</span><br><span class="line">CMD             容器启动时要运行的命令，可以有多个，但只有最后一个生效</span><br></pre></td></tr></table></figure><h1 id="或"><a href="#或" class="headerlink" title="或"></a>或</h1><p>FROM image_name:tag 定义了使用哪个基础镜像启动构建流程<br>MAINTAINER user_name 声明了镜像的创建者<br>ENV key value 设置环境变量（可以写多条）<br>RUN command 是Dockerfile的核心部分（可以写多条）<br>ADD source_dir/file 将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压<br>COPY source_dir/file 和ADD类似，区别在于如果是一个压缩文件，复制后不解压<br>WORKDIR path_dir 设置工作目录</p><h1 id="dockerfile的构建过程就是build的执行过程"><a href="#dockerfile的构建过程就是build的执行过程" class="headerlink" title="dockerfile的构建过程就是build的执行过程"></a>dockerfile的构建过程就是build的执行过程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.把当前目录和子目录当做上下文传递给docker服务，命令最后的点表示当前上下文。</span><br><span class="line">2.从当前目录（不包括子目录）找到Dockerfile文件，如果不指定文件，必须是此文件名。</span><br><span class="line">3.检查docker语法。</span><br><span class="line">4.从基础镜像运行一个容器。</span><br><span class="line">5.执行指令，修改容器，如上面操作添加数据卷，修改首页。</span><br><span class="line">6.对修改后的容器提交一个新的镜像层，也可叫做中间层镜像。</span><br><span class="line">7.针对中间层生成的镜像，运行新的容器。</span><br><span class="line">8.重复执行修改容器、提交镜像、运行容器指令，直到所有指令执行完成。</span><br></pre></td></tr></table></figure><blockquote><p>注：每条指令都会生成新的镜像，也就是生成中间层镜像，这样执行速度其实会很慢，可以不使用缓存。在构建命令中加上–no-cache=true 即可。可根据实际场景选择是否需要缓存。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;dockerfile指令&quot;&gt;&lt;a href=&quot;#dockerfile指令&quot; class=&quot;headerlink&quot; title=&quot;dockerfile指令&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>workdir</title>
    <link href="http://yoursite.com/2022/09/19/depth-docker-config-20220919-workdir/"/>
    <id>http://yoursite.com/2022/09/19/depth-docker-config-20220919-workdir/</id>
    <published>2022-09-18T16:00:00.000Z</published>
    <updated>2022-09-26T03:29:10.958Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN cd &#x2F;app</span><br><span class="line">RUN echo &quot;hello&quot; &gt; world.txt</span><br></pre></td></tr></table></figure><ol><li>如上命令，在linux中，cd /app 会影响到后面执行的语句，表示linux中，连续两行是同一个进程执行环境，因此前一个命令修改的内容状态，会直接影响后一个命令；</li><li>在dockerfile中，这两行 run 命令的执行环境根本不同，是两个完全不同的容器，到第二行命令会启动一个全新的容器。 属于 dockerfile 构建分层存储的概念</li></ol><h1 id="workdir的作用"><a href="#workdir的作用" class="headerlink" title="workdir的作用"></a>workdir的作用</h1><ol><li>使用 cd /app 这样的命令，在dockerfile中不会影响到后续命令的执行，不会改变后续命令的执行环境</li><li>如果在dockerfile中需要改变后续命令的进程的工作目录，则需要使用 workdir /app 命令</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>构建新镜像</title>
    <link href="http://yoursite.com/2022/09/19/depth-docker-notes-20220919-%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>http://yoursite.com/2022/09/19/depth-docker-notes-20220919-镜像构建/</id>
    <published>2022-09-18T16:00:00.000Z</published>
    <updated>2022-09-26T03:10:57.787Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="构建新镜像"><a href="#构建新镜像" class="headerlink" title="构建新镜像"></a>构建新镜像</h1><p>如果是自定义Dockerfile文件名，则构建时必须指定文件名，否则文件名必须是：Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f dockerfile-mycentos -t mysentos:1.0 .</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;构建新镜像&quot;&gt;&lt;a href=&quot;#构建新镜像&quot; class=&quot;headerlink&quot; title=&quot;构建新镜像&quot;&gt;&lt;/a&gt;构建新镜像&lt;/h1&gt;&lt;p&gt;如果是自定义Do
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="notes" scheme="http://yoursite.com/categories/depth/docker/notes/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker build的时候提示 operation not permitted</title>
    <link href="http://yoursite.com/2022/09/19/depth-docker-excp-20220919-docker-build%E6%8F%90%E7%A4%BAoperation-not-permitted/"/>
    <id>http://yoursite.com/2022/09/19/depth-docker-excp-20220919-docker-build提示operation-not-permitted/</id>
    <published>2022-09-18T16:00:00.000Z</published>
    <updated>2022-09-20T06:38:16.258Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="docker-build的时候提示-operation-not-permitted"><a href="#docker-build的时候提示-operation-not-permitted" class="headerlink" title="docker build的时候提示 operation not permitted"></a>docker build的时候提示 operation not permitted</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker build -f Dockerfile -t myhexo:1.0 .</span><br><span class="line">[+] Building 0.0s (1&#x2F;2)</span><br><span class="line"> &#x3D;&gt; ERROR [internal] load build definition from Dockerfile                                                                               0.0s</span><br><span class="line"> &#x3D;&gt; &#x3D;&gt; transferring dockerfile: 40B                                                                                                      0.0s</span><br><span class="line">------</span><br><span class="line"> &gt; [internal] load build definition from Dockerfile:</span><br><span class="line">------</span><br><span class="line">failed to solve with frontend dockerfile.v0: failed to read dockerfile: error from sender: open .Trash: operation not permitted</span><br></pre></td></tr></table></figure><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><ol><li>获取root权限<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 先进入root权限</span><br><span class="line">sudo su</span><br><span class="line"># 输入密码</span><br><span class="line"></span><br><span class="line"># 进入dockerfile目录</span><br><span class="line">cd work&#x2F;workSpace&#x2F;wk-github&#x2F;wk-github-zdy&#x2F;diabolo-hub-source-code&#x2F;</span><br><span class="line"></span><br><span class="line"># 再执行docker build</span><br><span class="line">docker build -f Dockerfile -t myhexo:1.0 .</span><br></pre></td></tr></table></figure></li><li>-f Dockerfile 全路径 （这个没试过）</li></ol><h2 id="此时再提示错误如下："><a href="#此时再提示错误如下：" class="headerlink" title="此时再提示错误如下："></a>此时再提示错误如下：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;docker-build的时候提示-operation-not-permitted&quot;&gt;&lt;a href=&quot;#docker-build的时候提示-operation-n
      
    
    </summary>
    
      <category term="depth" scheme="http://yoursite.com/categories/depth/"/>
    
      <category term="docker" scheme="http://yoursite.com/categories/depth/docker/"/>
    
      <category term="excp" scheme="http://yoursite.com/categories/depth/docker/excp/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>npm-20220916-npm</title>
    <link href="http://yoursite.com/2022/09/16/npm-20220916-npm/"/>
    <id>http://yoursite.com/2022/09/16/npm-20220916-npm/</id>
    <published>2022-09-16T06:32:40.437Z</published>
    <updated>2022-09-16T06:33:07.573Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="查找npm安装根目录"><a href="#查找npm安装根目录" class="headerlink" title="查找npm安装根目录"></a>查找npm安装根目录</h1><p>npm root -g</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h1 id=&quot;查找npm安装根目录&quot;&gt;&lt;a href=&quot;#查找npm安装根目录&quot; class=&quot;headerlink&quot; title=&quot;查找npm安装根目录&quot;&gt;&lt;/a&gt;查找npm安
      
    
    </summary>
    
    
  </entry>
  
</feed>
